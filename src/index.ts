import { Context, h, Logger } from 'koishi'
import type Config from './config'
import { createLogger, setLoggerLevel } from './utils/logger'

export let logger: Logger

export function apply(ctx: Context, config: Config) {
    logger = createLogger(ctx)
    setupLogger(config)

    ctx.command('vcc').action(async () => {
        return '使用 vcc.new 生成新的 Tailscale Auth Key'
    })

    ctx.command('vcc.new').action(async ({ session }) => {
        try {
            if (config.messageBefore) {
                await session.send(config.messageBefore)
            }

            const authKey = await generateTailscaleAuthKey(ctx, config)

            const installCommand = `curl -fsSL https://tailscale.com/install.sh | sh && sudo tailscale up --auth-key=${authKey}`

            const message = h('message', [
                h('text', '🔑 Tailscale Auth Key 已生成！\\n\\n'),
                h('text', '执行以下命令来安装和连接 Tailscale：\\n\\n'),
                h('text', { code: true }, installCommand),
                h('text', '\\n\\n⏰ 该 Auth Key 将在 7 天后过期')
            ])

            await session.send(message)

            if (config.messageAfter) {
                await session.send(config.messageAfter)
            }

            logger.info('成功生成 Tailscale Auth Key', {
                userId: session.userId
            })
        } catch (error) {
            logger.error('生成 Auth Key 失败', { error: error.message })
            await session.send(`❌ 生成 Auth Key 失败：${error.message}`)
        }
    })
}

async function generateTailscaleAuthKey(
    ctx: Context,
    config: Config
): Promise<string> {
    const { apiUrl, apiKey, tailnet } = config.tailscale

    try {
        const expiryDate = new Date()
        expiryDate.setDate(expiryDate.getDate() + 7)

        const response = await ctx.http.post(
            `${apiUrl}/v2/tailnet/${tailnet}/keys`,
            {
                capabilities: {
                    devices: {
                        create: {
                            reusable: false,
                            ephemeral: false,
                            preauthorized: true,
                            tags: ['tag:generated']
                        }
                    }
                },
                expirySeconds: 7 * 24 * 60 * 60,
                description: `Generated by VPN Control Chan at ${new Date().toISOString()}`
            },
            {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        )

        if (response && response.key) {
            return response.key
        } else {
            throw new Error('API 响应中没有找到 Auth Key')
        }
    } catch (error) {
        if (error.response) {
            const statusCode = error.response.status
            const errorMessage =
                error.response.data?.message || error.response.statusText
            throw new Error(
                `Tailscale API 错误 (${statusCode}): ${errorMessage}`
            )
        } else if (error.request) {
            throw new Error('无法连接到 Tailscale API，请检查网络连接')
        } else {
            throw new Error(`请求配置错误: ${error.message}`)
        }
    }
}

function setupLogger(config: Config) {
    if (config.isLog) {
        setLoggerLevel(config.logLevel)
    }
}

export * from './config'
