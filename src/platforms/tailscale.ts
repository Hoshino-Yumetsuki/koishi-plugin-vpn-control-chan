import { Context, h, Logger, Session } from 'koishi'
import type { Device, VPNPlatform } from './types'
import type Config from '../config'

export class TailscalePlatform implements VPNPlatform {
    name = 'tailscale'

    async generateAuthKey(ctx: Context, config: Config): Promise<string> {
        const { apiUrl, apiKey, tailnet } = config.tailscale

        try {
            const response = await ctx.http.post(
                `${apiUrl}/api/v2/tailnet/${tailnet}/keys`,
                {
                    capabilities: {
                        devices: {
                            create: {
                                reusable: false,
                                ephemeral: false,
                                preauthorized: true
                            }
                        }
                    },
                    expirySeconds: 604800,
                    description: 'Generated by VPN Control Chan'
                },
                {
                    headers: {
                        Authorization: `Bearer ${apiKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            )

            if (response && response.key) {
                return response.key
            } else {
                throw new Error(`API 响应异常: ${JSON.stringify(response)}`)
            }
        } catch (error) {
            if (error.response) {
                const status = error.response.status
                const data = error.response.data
                throw new Error(
                    `Tailscale API 错误 (${status}): ${JSON.stringify(data)}`
                )
            }
            throw new Error(`网络请求失败: ${error.message}`)
        }
    }

    generateInstallCommand(authKey: string): string {
        return `curl -fsSL https://tailscale.com/install.sh | sh && sudo tailscale up --auth-key=${authKey}`
    }

    // 处理设备名称，移除域名后缀
    private formatDeviceName(name: string): string {
        if (!name) return ''

        // 使用第一个点号分割设备名称，只保留前半部分
        const parts = name.split('.')
        return parts[0]
    }

    async listDevices(ctx: Context, config: Config): Promise<Device[]> {
        const { apiUrl, apiKey, tailnet } = config.tailscale

        const response = await ctx.http.get(
            `${apiUrl}/api/v2/tailnet/${tailnet}/devices`,
            {
                headers: {
                    Authorization: `Bearer ${apiKey}`
                }
            }
        )

        if (response && response.devices) {
            return response.devices.map((device: any) => ({
                id: device.id,
                name: device.name,
                hostname: device.hostname,
                addresses: device.addresses,
                os: device.os,
                clientVersion: device.clientVersion,
                lastSeen: device.lastSeen,
                authorized: device.authorized,
                user: device.user,
                updateAvailable: device.updateAvailable
            }))
        } else {
            throw new Error('Failed to list Tailscale devices')
        }
    }

    async handleNewCommand(
        ctx: Context,
        config: Config,
        session: Session
    ): Promise<void> {
        if (config.messageBefore) {
            await session.send(config.messageBefore)
        }

        const authKey = await this.generateAuthKey(ctx, config)
        const installCommand = this.generateInstallCommand(authKey)

        await session.send(
            h(
                'message',
                h('p', `呀！Auth Key 在这里啦～ (7天内有效哦):`),
                h('code', authKey),
                h('p', `一键安装命令:`),
                h('code', installCommand),
                h(
                    'p',
                    `温馨提示: 把上面的命令复制到目标设备执行，就能自动安装并连接 Tailscale 啦～`
                )
            )
        )
    }

    async handleListCommand(
        ctx: Context,
        config: Config,
        session: Session,
        page: number = 1
    ): Promise<void> {
        const devices = await this.listDevices(ctx, config)

        if (devices.length === 0) {
            await session.send('咦？好像还没有设备连接呢～快去添加一台设备吧！')
            return
        }

        const pageSize = 10
        const totalPages = Math.ceil(devices.length / pageSize)
        const startIndex = (page - 1) * pageSize
        const endIndex = startIndex + pageSize
        const paginatedDevices = devices.slice(startIndex, endIndex)

        if (page > totalPages) {
            await session.send(
                `哎呀，页数超出范围啦～总共只有 ${totalPages} 页哦`
            )
            return
        }

        if (paginatedDevices.length === 0) {
            await session.send(`嗯...第 ${page} 页好像没有设备呢`)
            return
        }

        const deviceList = paginatedDevices.map((device, index) => {
            const lastSeenDate = new Date(device.lastSeen).toLocaleString(
                'zh-CN'
            )
            const statusIcon = device.authorized ? '✅' : '❌'
            const updateIcon = device.updateAvailable ? '🔄' : ''

            return h(
                'p',
                `${startIndex + index + 1}. ${statusIcon} ${this.formatDeviceName(device.name)} (${device.os})
 ${device.addresses[0]}
 ${device.user}
 ${lastSeenDate} ${updateIcon}`
            )
        })

        await session.send(
            h(
                'message',
                h(
                    'p',
                    `所有的设备都在这里啦～ (共 ${devices.length} 台，第 ${page} 页/共 ${totalPages} 页):`
                ),
                ...deviceList
            )
        )
    }

    private calculateSimilarity(str1: string, str2: string): number {
        const len1 = str1.length
        const len2 = str2.length
        const matrix = Array(len1 + 1)
            .fill(null)
            .map(() => Array(len2 + 1).fill(null))

        for (let i = 0; i <= len1; i++) matrix[i][0] = i
        for (let j = 0; j <= len2; j++) matrix[0][j] = j

        for (let i = 1; i <= len1; i++) {
            for (let j = 1; j <= len2; j++) {
                if (str1[i - 1] === str2[j - 1]) {
                    matrix[i][j] = matrix[i - 1][j - 1]
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j - 1] + 1
                    )
                }
            }
        }

        const maxLen = Math.max(len1, len2)
        return maxLen === 0 ? 1 : (maxLen - matrix[len1][len2]) / maxLen
    }

    private searchDevices(devices: Device[], query: string): Device[] {
        const normalizedQuery = query.toLowerCase()
        const results: { device: Device; score: number }[] = []

        devices.forEach((device) => {
            let maxScore = 0
            // 搜索时同样需要去除设备名称的域名后缀
            const searchFields = [
                this.formatDeviceName(device.name),
                device.user,
                device.os,
                device.addresses[0] || '',
                device.clientVersion || ''
            ]

            searchFields.forEach((field) => {
                const normalizedField = field.toLowerCase()

                if (normalizedField.includes(normalizedQuery)) {
                    maxScore = Math.max(maxScore, 1.0)
                    return
                }

                const similarity = this.calculateSimilarity(
                    normalizedQuery,
                    normalizedField
                )
                if (similarity >= 0.7) {
                    maxScore = Math.max(maxScore, similarity)
                }
            })

            if (maxScore > 0) {
                results.push({ device, score: maxScore })
            }
        })

        return results
            .sort((a, b) => b.score - a.score)
            .map((result) => result.device)
    }

    async deleteDevice(
        ctx: Context,
        config: Config,
        deviceId: string
    ): Promise<boolean> {
        const { apiUrl, apiKey } = config.tailscale

        try {
            await ctx.http.delete(`${apiUrl}/api/v2/device/${deviceId}`, {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            })
            return true
        } catch (error) {
            if (error.response) {
                const status = error.response.status
                const data = error.response.data
                throw new Error(
                    `Tailscale API 错误 (${status}): ${JSON.stringify(data)}`
                )
            }
            throw new Error(`网络请求失败: ${error.message}`)
        }
    }

    async handleDeleteCommand(
        ctx: Context,
        config: Config,
        session: Session,
        deviceId: string
    ): Promise<void> {
        if (!deviceId || deviceId.trim().length === 0) {
            await session.send('请提供要删除的设备ID哦～')
            return
        }

        try {
            const devices = await this.listDevices(ctx, config)

            let device = devices.find(
                (d) =>
                    d.id === deviceId ||
                    d.name === deviceId ||
                    d.hostname === deviceId
            )

            if (!device) {
                device = devices.find((d) => {
                    const formattedDeviceName = this.formatDeviceName(d.name)
                    return formattedDeviceName === deviceId
                })
            }

            if (!device) {
                await session.send(
                    `找不到ID为 "${deviceId}" 的设备呢，请确认ID是否正确～`
                )
                return
            }

            await session.send(
                h(
                    'message',
                    h('p', `你确定要删除这台设备吗？`),
                    h('p', `设备名称: ${this.formatDeviceName(device.name)}`),
                    h('p', `系统类型: ${device.os}`),
                    h('p', `所属用户: ${device.user}`),
                    h('p', `请输入 y 或 yes 确认删除，输入其他内容取消:`)
                )
            )

            const result = await session.prompt(15000)

            if (result === null) {
                await session.send('回复超时，已自动取消删除操作～')
                return
            }

            const confirmation = result.toLowerCase()

            if (confirmation === 'y' || confirmation === 'yes') {
                await this.deleteDevice(ctx, config, device.id)
                await session.send(
                    `设备 "${this.formatDeviceName(device.name)}" 已成功删除～`
                )
            } else {
                await session.send('已取消删除操作～')
            }
        } catch (error) {
            throw new Error(`删除设备失败: ${error.message}`)
        }
    }

    async handleSearchCommand(
        ctx: Context,
        config: Config,
        session: Session,
        query: string
    ): Promise<void> {
        if (!query || query.trim().length === 0) {
            await session.send('请输入要搜索的内容哦～')
            return
        }

        const devices = await this.listDevices(ctx, config)

        if (devices.length === 0) {
            await session.send('咦？好像还没有设备连接呢～快去添加一台设备吧！')
            return
        }

        const searchResults = this.searchDevices(devices, query.trim())

        if (searchResults.length === 0) {
            await session.send(
                `没有找到包含 "${query}" 的设备呢～换个关键词试试吧`
            )
            return
        }

        const deviceList = searchResults.map((device, index) => {
            const lastSeenDate = new Date(device.lastSeen).toLocaleString(
                'zh-CN'
            )
            const statusIcon = device.authorized ? '✅' : '❌'
            const updateIcon = device.updateAvailable ? '🔄' : ''

            return h(
                'p',
                `${index + 1}. ${statusIcon} ${this.formatDeviceName(device.name)} (${device.os})
 ${device.addresses[0]}
 ${device.user}
 ${lastSeenDate} ${updateIcon}`
            )
        })

        await session.send(
            h(
                'message',
                h('p', `找到 ${searchResults.length} 台匹配的设备哦～`),
                ...deviceList
            )
        )
    }

    registerCommands(ctx: Context, config: Config, logger: Logger): void {
        ctx.command('vcc.tailscale', 'Tailscale 控制', {
            authority: config.minAuthority
        })
        ctx.command('vcc.tailscale.new', '生成新的 Tailscale Auth Key', {
            authority: config.minAuthority
        })
            .example('vcc.tailscale.new')
            .action(async ({ session }) => {
                try {
                    await this.handleNewCommand(ctx, config, session)

                    logger.info('成功生成 Tailscale Auth Key', {
                        userId: session.userId
                    })
                } catch (error) {
                    logger.error('生成 Tailscale Auth Key 失败', {
                        error: error.message,
                        userId: session.userId
                    })
                    await session.send(
                        `哎呀，Auth Key 生成失败了呢～ ${error.message}`
                    )
                }
            })

        ctx.command('vcc.tailscale.list', '列出 Tailscale 设备', {
            authority: config.minAuthority
        })
            .option('page', '-p <page:number>')
            .example('vcc.tailscale.list')
            .example('vcc.tailscale.list -p 2')
            .action(async ({ session, options }) => {
                try {
                    const page = Number(options.page) || 1
                    await this.handleListCommand(ctx, config, session, page)

                    logger.info('成功列出 Tailscale 设备', {
                        userId: session.userId,
                        page
                    })
                } catch (error) {
                    logger.error('列出 Tailscale 设备失败', {
                        error: error.message,
                        userId: session.userId
                    })
                    await session.send(
                        `哎呀，列出设备失败了呢～ ${error.message}`
                    )
                }
            })

        ctx.command(
            'vcc.tailscale.search <query:string>',
            '搜索 Tailscale 设备',
            {
                authority: config.minAuthority
            }
        )
            .example('vcc.tailscale.search myserver')
            .example('vcc.tailscale.search windows')
            .example('vcc.tailscale.search 192.168')
            .action(async ({ session }, query) => {
                try {
                    await this.handleSearchCommand(ctx, config, session, query)

                    logger.info('成功搜索 Tailscale 设备', {
                        userId: session.userId,
                        query
                    })
                } catch (error) {
                    logger.error('搜索 Tailscale 设备失败', {
                        error: error.message,
                        userId: session.userId
                    })
                    await session.send(
                        `哎呀，搜索设备失败了呢～ ${error.message}`
                    )
                }
            })

        ctx.command(
            'vcc.tailscale.delete <deviceId:string>',
            '删除 Tailscale 设备',
            {
                authority: config.minAuthority
            }
        )
            .example('vcc.tailscale.delete device-id')
            .example('vcc.tailscale.delete hostname')
            .action(async ({ session }, deviceId) => {
                try {
                    await this.handleDeleteCommand(
                        ctx,
                        config,
                        session,
                        deviceId
                    )

                    logger.info('成功删除 Tailscale 设备', {
                        userId: session.userId,
                        deviceId
                    })
                } catch (error) {
                    logger.error('删除 Tailscale 设备失败', {
                        error: error.message,
                        userId: session.userId
                    })
                    await session.send(
                        `哎呀，删除设备失败了呢～ ${error.message}`
                    )
                }
            })
    }
}
