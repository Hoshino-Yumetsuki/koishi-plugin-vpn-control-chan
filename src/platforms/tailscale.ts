import { Context, h, Logger, Session } from 'koishi'
import type { Device, VPNPlatform } from './types'
import type Config from '../config'

export class TailscalePlatform implements VPNPlatform {
    name = 'tailscale'

    async generateAuthKey(ctx: Context, config: Config): Promise<string> {
        const { apiUrl, apiKey, tailnet } = config.tailscale

        const response = await ctx.http.post(
            `${apiUrl}/api/v2/tailnet/${tailnet}/keys`,
            {
                keyType: 'client',
                description: 'Generated by VPN Control Chan',
                capabilities: {
                    devices: {
                        create: {
                            reusable: false,
                            ephemeral: false,
                            preauthorized: true
                        }
                    }
                },
                expirySeconds: 7 * 24 * 60 * 60,
                scopes: ['all:read']
            },
            {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        )

        if (response && response.key) {
            return response.key
        } else {
            throw new Error('Failed to generate Tailscale Auth Key')
        }
    }

    generateInstallCommand(authKey: string): string {
        return `curl -fsSL https://tailscale.com/install.sh | sh && sudo tailscale up --auth-key=${authKey}`
    }

    async listDevices(ctx: Context, config: Config): Promise<Device[]> {
        const { apiUrl, apiKey, tailnet } = config.tailscale

        const response = await ctx.http.get(
            `${apiUrl}/api/v2/tailnet/${tailnet}/devices`,
            {
                headers: {
                    Authorization: `Bearer ${apiKey}`
                }
            }
        )

        if (response && response.devices) {
            return response.devices.map((device: any) => ({
                id: device.id,
                name: device.name,
                hostname: device.hostname,
                addresses: device.addresses,
                os: device.os,
                clientVersion: device.clientVersion,
                lastSeen: device.lastSeen,
                authorized: device.authorized,
                user: device.user,
                updateAvailable: device.updateAvailable
            }))
        } else {
            throw new Error('Failed to list Tailscale devices')
        }
    }

    async handleNewCommand(
        ctx: Context,
        config: Config,
        session: Session
    ): Promise<void> {
        if (config.messageBefore) {
            await session.send(config.messageBefore)
        }

        const authKey = await this.generateAuthKey(ctx, config)
        const installCommand = this.generateInstallCommand(authKey)

        await session.send(
            h(
                'message',
                h('p', `🔑 Tailscale Auth Key (7天有效):`),
                h('code', authKey),
                h('p', `📋 安装命令:`),
                h('code', installCommand)
            )
        )
    }

    async handleListCommand(
        ctx: Context,
        config: Config,
        session: Session,
        page: number = 1
    ): Promise<void> {
        const devices = await this.listDevices(ctx, config)

        if (devices.length === 0) {
            await session.send('📱 当前没有已注册的设备')
            return
        }

        const pageSize = 10
        const totalPages = Math.ceil(devices.length / pageSize)
        const startIndex = (page - 1) * pageSize
        const endIndex = startIndex + pageSize
        const paginatedDevices = devices.slice(startIndex, endIndex)

        if (page > totalPages) {
            await session.send(`📱 页数超出范围，总共 ${totalPages} 页`)
            return
        }

        if (paginatedDevices.length === 0) {
            await session.send(`📱 当前没有第 ${page} 页的设备`)
            return
        }

        const deviceList = paginatedDevices.map((device, index) => {
            const lastSeenDate = new Date(device.lastSeen).toLocaleString(
                'zh-CN'
            )
            const statusIcon = device.authorized ? '✅' : '❌'
            const updateIcon = device.updateAvailable ? '🔄' : ''

            return h(
                'p',
                `${startIndex + index + 1}. ${statusIcon} ${device.hostname} (${device.os})
📍 ${device.addresses[0]}
👤 ${device.user}
🕒 ${lastSeenDate} ${updateIcon}`
            )
        })

        await session.send(
            h(
                'message',
                h(
                    'p',
                    `📱 Tailscale 设备列表 (${devices.length}台, 第 ${page} 页/${totalPages} 页):`
                ),
                ...deviceList
            )
        )
    }

    registerCommands(ctx: Context, config: Config, logger: Logger): void {
        ctx.command('vcc.tailscale', 'Tailscale 控制', {
            authority: config.minAuthority
        })
        ctx.command('vcc.tailscale.new', '生成新的 Tailscale Auth Key', {
            authority: config.minAuthority
        })
            .example('vcc.tailscale.new')
            .action(async ({ session }) => {
                try {
                    await this.handleNewCommand(ctx, config, session)

                    logger.info('成功生成 Tailscale Auth Key', {
                        userId: session.userId
                    })
                } catch (error) {
                    logger.error('生成 Tailscale Auth Key 失败', {
                        error: error.message,
                        userId: session.userId
                    })
                }
            })

        ctx.command('vcc.tailscale.list', '列出 Tailscale 设备', {
            authority: config.minAuthority
        })
            .option('page', '-p <page:number>')
            .example('vcc.tailscale.list')
            .example('vcc.tailscale.list -p 2')
            .action(async ({ session, options }) => {
                try {
                    const page = Number(options.page) || 1
                    await this.handleListCommand(ctx, config, session, page)

                    logger.info('成功列出 Tailscale 设备', {
                        userId: session.userId,
                        page
                    })
                } catch (error) {
                    logger.error('列出 Tailscale 设备失败', {
                        error: error.message,
                        userId: session.userId
                    })
                }
            })
    }
}
